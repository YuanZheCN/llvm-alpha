#ifndef LLVM_LIB_TARGET_SMALLBIRD_SMALLBIRDSUBTARGET_H
#define LLVM_LIB_TARGET_SMALLBIRD_SMALLBIRDSUBTARGET_H

#include "SmallBirdFrameLowering.h"
#include "SmallBirdISelLowering.h"
#include "SmallBirdInstrInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/MC/MCInstrItineraries.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "SmallBirdGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class SmallBirdTargetMachine;

class SmallBirdSubtarget : public SmallBirdGenSubtargetInfo {
  virtual void anchor();

protected:
  enum SmallBirdArchEnum {
    SmallBird32I,
    SmallBird32II
  };

  // SmallBird architecture version
  // Controled by -mcpu in commandline
  SmallBirdArchEnum SmallBirdArchVersion;

  // IsLittle - The target is Little Endian
  bool IsLittle;

  bool EnableOverflow;

  // HasCmp - cmp instructions.
  bool HasCmp;

  // HasSlt - slt instructions.
  bool HasSlt;

  InstrItineraryData InstrItins;

  const SmallBirdTargetMachine &TM;

  Triple TargetTriple;

  const SelectionDAGTargetInfo TSInfo;

  std::unique_ptr<const SmallBirdInstrInfo> InstrInfo;
  std::unique_ptr<const SmallBirdFrameLowering> FrameLowering;
  std::unique_ptr<const SmallBirdTargetLowering> TLInfo;

public:
  bool isPositionIndependent() const;
  //const SmallBirdABIInfo &getABI() const;

  // This constructor initializes the data members to match that
  // of the specified triple.
  // SmallBirdSubtarget(const Triple &TT, const std::string &CPU, const std::string &FS,
  //               bool little, const SmallBirdTargetMachine &_TM);
  SmallBirdSubtarget(const Triple &TT, const StringRef CPU, const StringRef FS,
                bool little, const SmallBirdTargetMachine &_TM);
  // Parses features string setting specified
  // subtarget options.  Definition of function is auto generated by tblgen.
  //void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

    // Automatically generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

  bool isLittle() const { return IsLittle; }
  bool hasSmallBird32I() const { return SmallBirdArchVersion >= SmallBird32I; }
  bool isSmallBird32I() const { return SmallBirdArchVersion == SmallBird32I; }
  bool hasSmallBird32II() const { return SmallBirdArchVersion >= SmallBird32II; }
  bool isSmallBird32II() const { return SmallBirdArchVersion == SmallBird32II; }

  // Features related to the presence of specific instructions.
  bool enableOverflow() const { return EnableOverflow; }
  bool disableOverflow() const { return !EnableOverflow; }
  bool hasCmp()   const { return HasCmp; }
  bool hasSlt()   const { return HasSlt; }

  bool abiUsesSoftFloat() const;

  bool enableLongBranchPass() const {
    return hasSmallBird32II();
  }

  llvm::Align stackAlignment() const { return llvm::Align(8); }

  SmallBirdSubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS,
                                                 const TargetMachine &TM);

  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
  const SmallBirdInstrInfo *getInstrInfo() const override { return InstrInfo.get(); }
  const TargetFrameLowering *getFrameLowering() const override {
    return FrameLowering.get();
  }
  const SmallBirdRegisterInfo *getRegisterInfo() const override {
    return &InstrInfo->getRegisterInfo();
  }
  const SmallBirdTargetLowering *getTargetLowering() const override {
    return TLInfo.get();
  }
  const InstrItineraryData *getInstrItineraryData() const override {
    return &InstrItins;
  }
};
} // End llvm namespace

#endif
