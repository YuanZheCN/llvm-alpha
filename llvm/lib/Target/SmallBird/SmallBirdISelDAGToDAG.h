//===-- SmallBirdISelDAGToDAG.h - A DAG to DAG Inst Selector for SmallBird -*- C++ -*-===//
//
//                    The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the SmallBird target.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_SMALLBIRD_SMALLBIRDISELDAGTODAG_H
#define LLVM_LIB_TARGET_SMALLBIRD_SMALLBIRDISELDAGTODAG_H

#include "SmallBird.h"
#include "SmallBirdSubtarget.h"
#include "SmallBirdTargetMachine.h"

#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/Type.h"
#include "llvm/Support/Debug.h"

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//
namespace llvm {
class SmallBirdDAGToDAGISel : public SelectionDAGISel {
public:
  explicit SmallBirdDAGToDAGISel(SmallBirdTargetMachine &TM, CodeGenOpt::Level OL)
      : SelectionDAGISel(TM, OL), Subtarget(nullptr) { }

  StringRef getPassName() const override {
    return "SmallBird DAG to DAG Pattern Instruction Selection";
  }

  bool runOnMachineFunction(MachineFunction &MF) override;

protected:

  // Keep a pointer to the SmallBirdSubtarget around so that we can make the right
  // decision when generating code for different targets.
  const SmallBirdSubtarget *Subtarget;

private:
  // Include the pieces autogenerated from the target description.
  #include "SmallBirdGenDAGISel.inc"

  // Return a reference to the TargetMachine, casted to the target-specific type.
  const SmallBirdTargetMachine &getTargetMachine() {
    return static_cast<const SmallBirdTargetMachine &>(TM);
  }

  void Select(SDNode *N) override;

  virtual bool trySelect(SDNode *Node) = 0;

  // Complex Pattern
  bool SelectAddr(SDNode *Parent, SDValue N, SDValue &Base, SDValue &Offset);

  // Return a target constant with the specified value.
  inline SDValue getImm(const SDNode *Node, unsigned Imm) {
    return CurDAG->getTargetConstant(Imm, SDLoc(Node), Node->getValueType(0));
  }

  virtual void processFunctionAfterISel(MachineFunction &MF) = 0;
};

} // end of llvm namespace

#endif